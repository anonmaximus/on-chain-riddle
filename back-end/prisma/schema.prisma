generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ESeederStatus {
    pending
    success
    error
}

model Seeder {
    id        String        @id @unique @default(uuid()) @db.Uuid()
    name      String        @unique
    status    ESeederStatus @default(pending)
    createdAt DateTime?     @default(now()) @map("created_at")
    updatedAt DateTime?     @updatedAt @map("updated_at")

    @@map("seeders")
}

model User {
    id String @id @unique @default(uuid()) @db.Uuid()

    address String @unique @db.VarChar(255)

    role   Role   @relation(fields: [roleId], references: [id])
    roleId String @map("role_id") @db.Uuid()

    challenge   Challenge?
    challengeId String?    @unique @map("challenge_id") @db.Uuid()

    loginAt   DateTime? @map("login_at")
    createdAt DateTime? @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("users")
}

model Challenge {
    id String @id @unique @default(uuid()) @db.Uuid()

    nonce String

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique @map("user_id") @db.Uuid()

    createdAt DateTime? @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("challenges")
}

model Role {
    id    String    @id @unique @default(uuid()) @db.Uuid()
    name  ERoleName @unique
    rules Rule[]
    users User[]

    createdAt DateTime? @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("roles")
}

model Rule {
    id    String    @id @unique @default(uuid()) @db.Uuid()
    name  ERuleName @unique
    roles Role[]

    createdAt DateTime? @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    @@map("rules")
}

enum ERuleName {
    submit_riddle_answer
}

enum ERoleName {
    restricted
    signed
}
